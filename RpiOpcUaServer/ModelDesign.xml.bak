<?xml version="1.0" encoding="utf-8" ?>
<opc:ModelDesign
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:opc="http://opcfoundation.org/UA/ModelDesign.xsd"
  xmlns:ua="http://opcfoundation.org/UA/"
  xmlns:uax="http://opcfoundation.org/UA/2008/02/Types.xsd"
	xmlns="http://opcfoundation.org/RpiWiFiOpcUa"
  TargetNamespace="http://opcfoundation.org/RpiWiFiOpcUa"
>
  <!-- 
  This element defines the mappings between the URIs used to identify namespaces and the symbols used in code.
  User defined design files can include other user defined design files.
  The location of included design files is specified with the FilePath attribute (absolute or relative path without the .xml suffix).
  -->
  <opc:Namespaces>
    <opc:Namespace Name="OpcUa" Prefix="Opc.Ua" XmlNamespace="http://opcfoundation.org/UA/2008/02/Types.xsd">http://opcfoundation.org/UA/</opc:Namespace>
    <opc:Namespace Name="RpiWiFiOpcUa" Prefix="RpiWiFiOpcUa">http://opcfoundation.org/RpiWiFiOpcUa</opc:Namespace>
  </opc:Namespaces>


  <!--DataTypes -->
  <opc:DataType SymbolicName="ControllerDataType" BaseType="ua:Structure">
    <opc:Fields>
      <opc:Field Name="Setpoint" DataType="ua:Double" />
      <opc:Field Name="ControllerOut" DataType="ua:Double" />
      <opc:Field Name="ProcessVariable" DataType="ua:Double" />
    </opc:Fields>
  </opc:DataType>
  
  <!--
  Define specialized reference types used in the model.
  -->
  <opc:ReferenceType SymbolicName="FlowTo" BaseType="ua:NonHierarchicalReferences">
    <opc:Description>A reference that indicates a flow between two objects.</opc:Description>
    <opc:InverseName>FlowFrom</opc:InverseName>
  </opc:ReferenceType>

  <opc:ReferenceType SymbolicName="SignalTo" BaseType="ua:NonHierarchicalReferences">
    <opc:Description>A reference that indicates an electrical signal between two variables.</opc:Description>
    <opc:InverseName>SignalFrom</opc:InverseName>
  </opc:ReferenceType>

  <!--
  Define generic base types for the various controllers, sensors and actuators used in the model.
  -->
  <opc:ObjectType SymbolicName="GenericControllerType" BaseType="ua:BaseObjectType">
    <opc:Description>A generic PID controller</opc:Description>
    <opc:Children>
      <opc:Property SymbolicName="Measurement" DataType="ua:Double" ValueRank="Scalar" />
      <opc:Property SymbolicName="SetPoint" DataType="ua:Double" ValueRank="Scalar" AccessLevel="ReadWrite" />
      <opc:Property SymbolicName="ControlOut" DataType="ua:Double" ValueRank="Scalar" />
    </opc:Children>
  </opc:ObjectType>

  <opc:ObjectType SymbolicName="GenericSensorType" BaseType="ua:BaseObjectType">
    <opc:Description>A generic sensor that read a process value.</opc:Description>
    <opc:Children>
      <opc:Variable SymbolicName="Output" DataType="ua:Double" ValueRank="Scalar" TypeDefinition="ua:AnalogItemType" />
    </opc:Children>
  </opc:ObjectType>

  <opc:ObjectType SymbolicName="GenericActuatorType" BaseType="ua:BaseObjectType">
    <opc:Description>Represents a piece of equipment that causes some action to occur.</opc:Description>
    <opc:Children>
      <opc:Variable SymbolicName="Input" DataType="ua:Double" ValueRank="Scalar" TypeDefinition="ua:AnalogItemType" AccessLevel="Write" />
    </opc:Children>
  </opc:ObjectType>

  <opc:ObjectType SymbolicName="CustomControllerType" BaseType="ua:BaseObjectType">
    <opc:Description>A custom PID controller with 3 inputs</opc:Description>
    <opc:Children>
      <opc:Property SymbolicName="Input1" DataType="ua:Double" ValueRank="Scalar" AccessLevel="Write" />
      <opc:Property SymbolicName="Input2" DataType="ua:Double" ValueRank="Scalar" AccessLevel="Write" />
      <opc:Property SymbolicName="Input3" DataType="ua:Double" ValueRank="Scalar" AccessLevel="Write" />
      <opc:Property SymbolicName="ControlOut" DataType="ua:Double" />
    </opc:Children>
  </opc:ObjectType>

  <opc:ObjectType SymbolicName="RpiWiFiInterface" BaseType="ua:BaseObjectType">
    <opc:Description>Rpi Wireless Interface.</opc:Description>
    <opc:Children>
      <opc:Variable SymbolicName="WiFi1_SSID" DataType="ua:String" AccessLevel="Read" />
      <opc:Variable SymbolicName="WiFi2_SSID" DataType="ua:String" AccessLevel="Read" />
      <opc:Variable SymbolicName="WiFi3_SSID" DataType="ua:String" AccessLevel="Read" />
      <opc:Variable SymbolicName="WiFi4_SSID" DataType="ua:String" AccessLevel="Read" />
      <opc:Variable SymbolicName="WiFi5_SSID" DataType="ua:String" AccessLevel="Read" />
      <opc:Variable SymbolicName="SelWiFiPasskey" DataType="ua:String" AccessLevel="ReadWrite" />
      <opc:Variable SymbolicName="WiFi1_Connected" DataType="ua:Boolean" AccessLevel="Read" />
      <opc:Variable SymbolicName="WiFi2_Connected" DataType="ua:Boolean" AccessLevel="Read" />
      <opc:Variable SymbolicName="WiFi3_Connected" DataType="ua:Boolean" AccessLevel="Read" />
      <opc:Variable SymbolicName="WiFi4_Connected" DataType="ua:Boolean" AccessLevel="Read" />
      <opc:Variable SymbolicName="WiFi5_Connected" DataType="ua:Boolean" AccessLevel="Read" />
      <opc:Variable SymbolicName="WiFi1_ConnectCmd" DataType="ua:Boolean" AccessLevel="Write" />
      <opc:Variable SymbolicName="WiFi2_ConnectCmd" DataType="ua:Boolean" AccessLevel="Write" />
      <opc:Variable SymbolicName="WiFi3_ConnectCmd" DataType="ua:Boolean" AccessLevel="Write" />
      <opc:Variable SymbolicName="WiFi4_ConnectCmd" DataType="ua:Boolean" AccessLevel="Write" />
      <opc:Variable SymbolicName="WiFi5_ConnectCmd" DataType="ua:Boolean" AccessLevel="Write" />
      <opc:Variable SymbolicName="WiFi_DisconnectCmd" DataType="ua:Boolean" AccessLevel="Write"/>
    </opc:Children>
  </opc:ObjectType>

  <!--
  Define concrete types for the various controllers, sensors and actuators used in the model.
  -->
  <opc:ObjectType SymbolicName="ValveType" BaseType="GenericActuatorType">
    <opc:Description>An actuator that controls the flow through a pipe.</opc:Description>
  </opc:ObjectType>

  <opc:ObjectType SymbolicName="LevelControllerType" BaseType="GenericControllerType">
    <opc:Description>A controller for the level of a fluid in a drum.</opc:Description>
  </opc:ObjectType>

  <opc:ObjectType SymbolicName="FlowControllerType" BaseType="GenericControllerType">
    <opc:Description>A controller for the flow of a fluid through a pipe.</opc:Description>
  </opc:ObjectType>

  <opc:ObjectType SymbolicName="LevelIndicatorType" BaseType="GenericSensorType">
    <opc:Description>A sensor that reports the level of a liquid in a tank.</opc:Description>
  </opc:ObjectType>

  <opc:ObjectType SymbolicName="FlowTransmitterType" BaseType="GenericSensorType">
    <opc:Description>A sensor that reports the flow of a liquid through a pipe.</opc:Description>
  </opc:ObjectType>

  <opc:ObjectType SymbolicName="RpiFolder" BaseType="ua:FolderType">

  </opc:ObjectType>
  
  <!--
  Define concrete types for the components contained in the boiler.
  These middle tier types could be omitted and declared as folders within the boiler type.
  However, doing so would not produce a strongly typed class.
  -->
  <opc:ObjectType SymbolicName="BoilerInputPipeType" BaseType="ua:FolderType">
    <opc:Children>
      <opc:Object SymbolicName="FlowTransmitter1" TypeDefinition="FlowTransmitterType" SupportsEvents="true">
        <opc:BrowseName>FTX001</opc:BrowseName>
      </opc:Object>
      <opc:Object SymbolicName="Valve" TypeDefinition="ValveType" SupportsEvents="true">
        <opc:BrowseName>ValveX001</opc:BrowseName>
      </opc:Object>
    </opc:Children>
    <!--
    The declaration of child defines a HasComponent reference, however, in this model
    events can propogate from the child to the parent so the HasNotifier reference needs
    to be declared as well.
    -->
    <opc:References>
      <opc:Reference>
        <opc:ReferenceType>ua:HasNotifier</opc:ReferenceType>
        <opc:TargetId>BoilerInputPipeType_FlowTransmitter1</opc:TargetId>
      </opc:Reference>
    </opc:References>
  </opc:ObjectType>
  
  <opc:ObjectType SymbolicName="BoilerDrumType" BaseType="ua:FolderType">
    <opc:Children>
      <opc:Object SymbolicName="LevelIndicator" TypeDefinition="LevelIndicatorType" SupportsEvents="true">
        <opc:BrowseName>LIX001</opc:BrowseName>
      </opc:Object>
    </opc:Children>
    <opc:References>
      <opc:Reference>
        <opc:ReferenceType>ua:HasNotifier</opc:ReferenceType>
        <opc:TargetId>BoilerDrumType_LevelIndicator</opc:TargetId>
      </opc:Reference>
    </opc:References>
  </opc:ObjectType>

  <opc:ObjectType SymbolicName="BoilerOutputPipeType" BaseType="ua:FolderType">
    <opc:Children>
      <opc:Object SymbolicName="FlowTransmitter2" TypeDefinition="FlowTransmitterType" SupportsEvents="true">
        <opc:BrowseName>FTX002</opc:BrowseName>
      </opc:Object>
    </opc:Children>
    <opc:References>
      <opc:Reference>
        <opc:ReferenceType>ua:HasNotifier</opc:ReferenceType>
        <opc:TargetId>BoilerOutputPipeType_FlowTransmitter2</opc:TargetId>
      </opc:Reference>
    </opc:References>
  </opc:ObjectType>

  <!--
  Declare the boiler type along with all of the references between the different components.
  Adding references between components requires that they be overriden. 
  Overridden nodes only need to delcare the correct NodeType and the SymbolicName; all other
  parameters are initialized from the original declaration. Any parameters that are explicitly
  specified replace the original declaration and are used even if the original declaration
  is changed.
  
  References are specified by constructing the SymbolicIds for the components by inserting
  a '_' between each SymbolicName. This means that a '_' cannot be part of a SymbolicName.
  -->
  <opc:ObjectType SymbolicName="BoilerType" BaseType="ua:BaseObjectType" SupportsEvents="true">
    <opc:Description>A boiler used to produce steam for a turbine.</opc:Description>
    <opc:Children>
      
      <opc:Object SymbolicName="InputPipe" TypeDefinition="BoilerInputPipeType" SupportsEvents="true">
        <opc:BrowseName>PipeX001</opc:BrowseName>
        <opc:Children>
          <opc:Object SymbolicName="FlowTransmitter1">
            <opc:Children>
              <opc:Variable SymbolicName="Output" />
            </opc:Children>
          </opc:Object>
          <opc:Object SymbolicName="Valve">
            <opc:Children>
              <opc:Variable SymbolicName="Input" />
            </opc:Children>
          </opc:Object>
        </opc:Children>
        <!--
        It is only necessary to declare one side of the reference. Reverse references are  
        added automatically unless the IsOneWay attribute is set to True.
        -->
        <opc:References>
          <opc:Reference > 
            <opc:ReferenceType>FlowTo</opc:ReferenceType>
            <opc:TargetId>BoilerType_Drum</opc:TargetId>
          </opc:Reference>
        </opc:References>
      </opc:Object>
      
      <opc:Object SymbolicName="Drum" TypeDefinition="BoilerDrumType" SupportsEvents="true">
        <opc:BrowseName>DrumX001</opc:BrowseName>
        <opc:Children>
          <opc:Object SymbolicName="LevelIndicator">
            <opc:Children>
              <opc:Variable SymbolicName="Output" />
            </opc:Children>
          </opc:Object>
        </opc:Children>
        <opc:References>
          <opc:Reference>
            <opc:ReferenceType>FlowTo</opc:ReferenceType>
            <opc:TargetId>BoilerType_OutputPipe</opc:TargetId>
          </opc:Reference>
        </opc:References>
      </opc:Object>
      
      <opc:Object SymbolicName="OutputPipe" TypeDefinition="BoilerOutputPipeType" SupportsEvents="true">
        <opc:BrowseName>PipeX002</opc:BrowseName>
        <opc:Children>
          <opc:Object SymbolicName="FlowTransmitter2">
            <opc:Children>
              <opc:Variable SymbolicName="Output" />
            </opc:Children>
          </opc:Object>
        </opc:Children>
      </opc:Object>
      
      <opc:Object SymbolicName="FlowController" TypeDefinition="FlowControllerType">
        <opc:BrowseName>FCX001</opc:BrowseName>
        <opc:Children>
          <opc:Property SymbolicName="Measurement">
            <opc:References>
              <opc:Reference IsInverse="true">
                <opc:ReferenceType>SignalTo</opc:ReferenceType>
                <opc:TargetId>BoilerType_InputPipe_FlowTransmitter1_Output</opc:TargetId>
              </opc:Reference>
            </opc:References>
          </opc:Property>
          <opc:Property SymbolicName="SetPoint" />
          <opc:Property SymbolicName="ControlOut">
            <opc:References>
              <opc:Reference>
                <opc:ReferenceType>SignalTo</opc:ReferenceType>
                <opc:TargetId>BoilerType_InputPipe_Valve_Input</opc:TargetId>
              </opc:Reference>
            </opc:References>
          </opc:Property>
        </opc:Children>
      </opc:Object>
      <opc:Object SymbolicName="LevelController" TypeDefinition="LevelControllerType">
        <opc:BrowseName>LCX001</opc:BrowseName>
        <opc:Children>
          <opc:Property SymbolicName="Measurement">
            <opc:References>
              <opc:Reference IsInverse="true">
                <opc:ReferenceType>SignalTo</opc:ReferenceType>
                <opc:TargetId>BoilerType_Drum_LevelIndicator_Output</opc:TargetId>
              </opc:Reference>
            </opc:References>
          </opc:Property>
          <opc:Property SymbolicName="SetPoint" />
          <opc:Property SymbolicName="ControlOut">
            <opc:References>
              <opc:Reference>
                <opc:ReferenceType>SignalTo</opc:ReferenceType>
                <opc:TargetId>BoilerType_CustomController_Input1</opc:TargetId>
              </opc:Reference>
            </opc:References>
          </opc:Property>
        </opc:Children>
      </opc:Object>
      <opc:Object SymbolicName="CustomController" TypeDefinition="CustomControllerType">
        <opc:BrowseName>CCX001</opc:BrowseName>
        <opc:Children>
          <opc:Property SymbolicName="Input1" />
          <opc:Property SymbolicName="Input2">
            <opc:References>
              <opc:Reference IsInverse="true">
                <opc:ReferenceType>SignalTo</opc:ReferenceType>
                <opc:TargetId>BoilerType_InputPipe_FlowTransmitter1_Output</opc:TargetId>
              </opc:Reference>
            </opc:References>
          </opc:Property>
          <opc:Property SymbolicName="Input3">
            <opc:References>
              <opc:Reference IsInverse="true">
                <opc:ReferenceType>SignalTo</opc:ReferenceType>
                <opc:TargetId>BoilerType_OutputPipe_FlowTransmitter2_Output</opc:TargetId>
              </opc:Reference>
            </opc:References>
          </opc:Property>
          <opc:Property SymbolicName="ControlOut">
            <opc:References>
              <opc:Reference>
                <opc:ReferenceType>SignalTo</opc:ReferenceType>
                <opc:TargetId>BoilerType_FlowController_SetPoint</opc:TargetId>
              </opc:Reference>
            </opc:References>
          </opc:Property>
        </opc:Children>
      </opc:Object>
      
    </opc:Children>
    
    <opc:References>
      <opc:Reference>
        <opc:ReferenceType>ua:HasNotifier</opc:ReferenceType>
        <opc:TargetId>BoilerType_InputPipe</opc:TargetId>
      </opc:Reference>
      <opc:Reference>
        <opc:ReferenceType>ua:HasNotifier</opc:ReferenceType>
        <opc:TargetId>BoilerType_Drum</opc:TargetId>
      </opc:Reference>
      <opc:Reference>
        <opc:ReferenceType>ua:HasNotifier</opc:ReferenceType>
        <opc:TargetId>BoilerType_OutputPipe</opc:TargetId>
      </opc:Reference>
    </opc:References>
    
  </opc:ObjectType>

  <opc:ObjectType SymbolicName="RpiType" BaseType="ua:BaseObjectType" SupportsEvents="true">
    <opc:Description>Raspberry Pi OPC UA Interface.</opc:Description>
    <opc:Children>

      <opc:Object SymbolicName="WiFi" TypeDefinition="RpiWiFiInterface" SupportsEvents="true">
        <opc:BrowseName>RpiWiFi</opc:BrowseName>
        <opc:Children>
          <opc:Variable SymbolicName="WiFi1_SSID" />
          <opc:Variable SymbolicName="WiFi2_SSID" />
          <opc:Variable SymbolicName="WiFi3_SSID" />
          <opc:Variable SymbolicName="WiFi4_SSID" />
          <opc:Variable SymbolicName="WiFi5_SSID" />
          <opc:Variable SymbolicName="SelWiFiPasskey" />
          <opc:Variable SymbolicName="WiFi1_Connected" />
          <opc:Variable SymbolicName="WiFi2_Connected" />
          <opc:Variable SymbolicName="WiFi3_Connected" />
          <opc:Variable SymbolicName="WiFi4_Connected" />
          <opc:Variable SymbolicName="WiFi5_Connected" />
          <opc:Variable SymbolicName="WiFi1_ConnectCmd" />
          <opc:Variable SymbolicName="WiFi2_ConnectCmd" />
          <opc:Variable SymbolicName="WiFi3_ConnectCmd" />
          <opc:Variable SymbolicName="WiFi4_ConnectCmd" />
          <opc:Variable SymbolicName="WiFi5_ConnectCmd" />
          <opc:Variable SymbolicName="WiFi_DisconnectCmd" />
        </opc:Children>
      </opc:Object>
    </opc:Children>

    <opc:References>
    </opc:References>

  </opc:ObjectType>


  <!--
  Declare an instance of a Boiler.
  Normally instances are created by program logic instead of being part of the model.
  This is provided as an example of how to do it when there is a need for persistent instances.
  Note that the DisplayNames are overridden for the base level nodes.
  -->
  <opc:Object SymbolicName="Boiler1" TypeDefinition="BoilerType" SupportsEvents="true">
    <opc:BrowseName>Boiler #1</opc:BrowseName>
    <opc:Children>
      <opc:Object SymbolicName="InputPipe" TypeDefinition="BoilerInputPipeType" SupportsEvents="true">
        <opc:DisplayName>Pipe1001</opc:DisplayName>
      </opc:Object>
      <opc:Object SymbolicName="Drum" TypeDefinition="BoilerDrumType" SupportsEvents="true">
        <opc:DisplayName>Drum1001</opc:DisplayName>
      </opc:Object>
      <opc:Object SymbolicName="OutputPipe" TypeDefinition="BoilerOutputPipeType" SupportsEvents="true">
        <opc:DisplayName>Pipe1002</opc:DisplayName>
      </opc:Object>
      <opc:Object SymbolicName="FlowController" TypeDefinition="FlowControllerType">
        <opc:DisplayName>FC1001</opc:DisplayName>
      </opc:Object>
      <opc:Object SymbolicName="LevelController" TypeDefinition="LevelControllerType">
        <opc:DisplayName>LC1001</opc:DisplayName>
      </opc:Object>
      <opc:Object SymbolicName="CustomController" TypeDefinition="CustomControllerType">
        <opc:DisplayName>CC1001</opc:DisplayName>
      </opc:Object>
    </opc:Children>
    <!--
    Link the instance back to the ObjectsFolder
      -->
    <opc:References>
      <opc:Reference IsInverse="true">
        <opc:ReferenceType>ua:Organizes</opc:ReferenceType>
        <opc:TargetId>ua:ObjectsFolder</opc:TargetId>
      </opc:Reference>
    </opc:References>

  </opc:Object>

  <opc:Object SymbolicName="Rpi" TypeDefinition="RpiType" SupportsEvents="true">
    <opc:BrowseName>Raspberry Pi</opc:BrowseName>
    <opc:Children>
      <opc:Object SymbolicName="WiFi" TypeDefinition="RpiWiFiInterface" SupportsEvents="true">
        <opc:DisplayName>RpiWiFi</opc:DisplayName>
      </opc:Object>
    </opc:Children>
    <!--
    Link the instance back to the ObjectsFolder
      -->
    <opc:References>
      <opc:Reference IsInverse="true">
        <opc:ReferenceType>ua:Organizes</opc:ReferenceType>
        <opc:TargetId>ua:ObjectsFolder</opc:TargetId>
      </opc:Reference>
    </opc:References>
  </opc:Object>

</opc:ModelDesign>